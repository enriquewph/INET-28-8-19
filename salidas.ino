#include "header.h"

void control_HUMEDAD()
{
    if (HUMEDAD <= HUMEDAD_TRIGGER && HUMEDAD_ESTADO == 0)
    {
        HUMEDAD_ESTADO = MODO_REGADO_ENCENDIDO;
    }
    if (HUMEDAD >= HUMEDAD_RELEASE && HUMEDAD_ESTADO == 1)
    {
        HUMEDAD_ESTADO = MODO_REGADO_APAGADO;
    }
    FUNCIONAMIENTO_REGADO = HUMEDAD_ESTADO;
}

void control_TEMP()
{
    if (TEMPERATURA <= TEMPERATURA_BAJA_TRIGGER && TEMPERATURA_BAJA_ESTADO == 0)
    {
        TEMPERATURA_BAJA_ESTADO = 1;
        FUNCIONAMIENTO_TEMP = MODO_TEMP_CALENTANDO;
    }
    if (TEMPERATURA >= TEMPERATURA_RELEASE && TEMPERATURA_BAJA_ESTADO == 1)
    {

        TEMPERATURA_BAJA_ESTADO = 0;
        FUNCIONAMIENTO_TEMP = MODO_TEMP_STANDBY;
    }

    if (TEMPERATURA >= TEMPERATURA_ALTA_TRIGGER && TEMPERATURA_ALTA_ESTADO == 0)
    {
        TEMPERATURA_ALTA_ESTADO = 1;
        FUNCIONAMIENTO_TEMP = MODO_TEMP_ENFRIANDO;
    }
    if (TEMPERATURA <= TEMPERATURA_RELEASE && TEMPERATURA_ALTA_ESTADO == 1)
    {

        TEMPERATURA_ALTA_ESTADO = 0;
        FUNCIONAMIENTO_TEMP = MODO_TEMP_STANDBY;
    }
}

void TEMPERATURA_UPDATE_RELEASE()
{
    TEMPERATURA_RELEASE = (TEMPERATURA_ALTA_TRIGGER + TEMPERATURA_BAJA_TRIGGER) / 2;
}

void setearSalidas()
{
    digitalWrite(PIN_RELAY_MOTOR, SALIDA_EXTRACTOR);
    digitalWrite(PIN_RELAY_CALEFACTOR, SALIDA_CALEFACTOR);
    digitalWrite(PIN_RELAY_RIEGO, SALIDA_REGADOR);
    analogWrite(PIN_DIMMER_LUZ, pwmmap(POTENCIA_LUCES, 0, 100, 0, 255));
}

uint8_t pwmmap(uint8_t x, uint8_t in_min, uint8_t in_max, uint8_t out_min, uint8_t out_max)
{
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}